import java.util.List;
import java.util.Queue;
import java.util.LinkedList;

public class GraphSearchEngineImpl implements GraphSearchEngine
{
	public GraphSearchEngineImpl()
	{
		
	}
	
	public List<Node> findShortestPath (Node s, Node t)
	{
		//First perform a bfs.
		List<Node> visitedNodes = new LinkedList<Node>();
		Queue<Node> nodesToVisit = new LinkedList<Node>();
		
		nodesToVisit.add(s); //enqueue.
		Node newlyVisitedNode;
		while(nodesToVisit.size() > 0)
		{
			newlyVisitedNode = nodesToVisit.remove(); //dequeue.
			visitedNodes.add(newlyVisitedNode);
			
			for(Node node : newlyVisitedNode.getNeighbors())
			{
				if(!nodesToVisit.contains(newlyVisitedNode) && !visitedNodes.contains(newlyVisitedNode))
				{
					
				}
			}
		}
	}
}
